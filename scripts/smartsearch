#!/usr/bin/env python3
import argparse
import configparser
from docx import Document
import glob
import json
import logging
import magic
import os
import requests
import requests_toolbelt
import sys
import urllib3

# https://stackoverflow.com/questions/27981545/suppress-insecurerequestwarning-unverified-https-request-is-being-made-in-pythopyt
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
logging.getLogger("requests").setLevel(logging.WARNING)
logging.getLogger("urllib3").setLevel(logging.WARNING)

CONFIGURATION_FILE = "smartsearch.ini"
HOME_DIR = '.src'

DEFAULT_CONFIGURATION = """[server]
url = https://127.0.0.1
apipath = /api/v1
verify_ssl = false"""

def get_user_dir():
    if sys.platform == 'win32':
        user_home_dir = os.getenv( 'HOMEDRIVE', None ) + os.getenv( 'HOMEPATH', None )
    else:
        user_home_dir = os.getenv( 'HOME' )

    if not user_home_dir:
        user_home_dir = os.getcwd()

    path = user_home_dir + os.sep + HOME_DIR
    return path

def make_user_dir():
    full_path_to__dir = get_user_dir()
    if not os.path.exists( full_path_to__dir ):
        os.mkdir( full_path_to__dir )
    
    return full_path_to__dir

def read_config_data( config_path ):
    config = configparser.ConfigParser()
    config.read(config_path)
    return config

def read__properties( arguments, logger ):
    _configuration = None
    full_path_to__config = arguments.homedir + os.sep + arguments.configfile

    logger.info( "reading client properties" )

    arguments.configfile = full_path_to__config
    logger.info( "full path to client configuration file is {}".format(arguments.configfile) )

    if os.path.exists(full_path_to__config):
        _configuration = read_config_data(full_path_to__config)        
    else:
        logger.info( "property file did not exist, save new default" )
        with open( full_path_to__config, 'w' ) as writer:
            writer.write( DEFAULT_CONFIGURATION )
            logger.debug("save") 

        _configuration = configparser.ConfigParser()        
        _configuration.read( full_path_to__config )

    logger.debug( "all read" )
    return _configuration

def setup_argument_parser():
    parser = argparse.ArgumentParser()

    parser.add_argument('-C', '--configfile', help="Specify an alternate configuration filename. Default is ~/.srt/smartsearch.ini")

    parser.add_argument('-H', '--homedir', help="Specify an alternate home directory. Default is ~/.srt")

    parser.add_argument('-L', '--loglevel', help="Specify alternate logging level. (Default is NONE)")

    parser.add_argument('-q', '--quiet', action='store_true', help="Supress logging. Default is FALSE") 
    
    parser.add_argument('-r', '--recurse', action='store_true', help="Enable recursive searching, Default is FALSE") 

    parser.add_argument('-t', '--target', help="Specify target input path(s)")

    parser.add_argument('-w', '--words', help="Specify word to search for")

    return parser

def parse_arguments():
    builtParser = setup_argument_parser()
    return builtParser.parse_args()

def search_docx( file, matches ):
    document = Document( file )
    for paragraph in document.paragraphs:
        for w in list_of_words:
            if w in paragraph.text:
                matches.append( file )
            
    for table in document.tables:
        for row in table.rows:
            for cell in row.cells:
                for paragraph in cell.paragraphs:
                    for w in list_of_words:
                        if w in paragraph.text:
                            matches.append( file )


def search_pdf( file ):
    pass

if __name__ == "__main__":
    arguments = parse_arguments( )
 
    if not arguments.configfile:
        arguments.configfile = CONFIGURATION_FILE

    if not arguments.loglevel:
        arguments.loglevel = logging.INFO

    if not arguments.homedir:
        arguments.homedir = make_user_dir( )

    logging.basicConfig(format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p', level=arguments.loglevel)
    logger = logging.getLogger( '' )

    if arguments.quiet:
        logger.propagate = False

    # Properties are the attributes set in the ./client.ini file
    _properties = read__properties( arguments, logger )

    if not arguments.words:
        raise Exception('You must specify a set of search words or path of words')

    if not os.path.exists( arguments.words ):
        list_of_words = arguments.words.split(",")
    else:
        arguments.words = os.path.abspath(arguments.words)
        with open( arguments.words, 'r' ) as reader:
            logger.info( 'read list of words from {}'.format(arguments.words) )
            list_of_words = reader.readlines( ) 
            list_of_words = map(lambda s: s.strip(), list_of_words)
    matches = []

    if not arguments.target:
        raise Exception("You must specify a target path!")

    arguments.target = os.path.expanduser( arguments.target )
    if arguments.target.find("*") == -1:
        arguments.target += os.sep + "*"

    # https://stackoverflow.com/questions/24805671/how-to-use-python-docx-to-replace-text-in-a-word-document-and-save
    possible_targets = glob.glob( os.path.expanduser(arguments.target), recursive=True )
    for t in possible_targets:
        if not os.path.isdir( t ):
            f = magic.from_file( os.path.abspath(t) )
            search_docx( t, matches )

    matches = list( set(matches) )
    print( json.dumps(matches,indent=4,sort_keys=True) )
